# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  RED: \033[1;31m
  GREEN: \033[1;32m
  YELLOW: \033[1;33m
  BLUE: \033[1;34m
  PURPLE: \033[1;35m
  CYAN: \033[1;36m
  BLANK: \033[0m
  WORKING_DIR: resources
  COVERAGE_THRESHOLD: 70
  PROGRAM_NAME: skopeo-transfer
  REPOSITORY: ixxel

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    container: 
      image: ixxel/unit-tests-alpine:latest
    defaults:
      run:
        shell: bash
    env:
      CODE_DIR: resources
    steps:
    - uses: actions/checkout@v2
    - name: Lint Python code with Flake8
      uses: ixxeL-actions/flake8@main
      with:
        format: pylint
        exit-zero: 'true'
        output-file: ''
        ignore-error: 'E501'
        working-dir: '${WORKING_DIR}'
#     - name: Lint with flake8
#       id: lint-flake
#       run: |
#         echo -e "${BLUE}[ STEP - LINTING CODE ] > Linting Python code with Flake8.${BLANK}"
#         echo -e "${CYAN}[ INFO ] > Flake8 version.${BLANK}"
#         flake8 --version
#         echo -e "${YELLOW}[ EXECUTING ] > Executing code linting.${BLANK}"
#         flake8 ${WORKING_DIR}/skopeoTransfer.py --count --ignore=E266,E265,E501,E302,E305 --statistics --exit-zero
#         flake8 ${WORKING_DIR}/skopeolib.py --count --ignore=E266,E265,E501,E302,E305 --statistics --exit-zero 
#         # flake8 ${{ env.CODE_DIR }}/skopeoTransfer.py --count --ignore=E266,E265,E501,E302,E305 --statistics --exit-zero
#         # flake8 ${{ env.CODE_DIR }}/skopeolib.py --count --ignore=E266,E265,E501,E302,E305 --statistics --exit-zero 
    - name: Test with pytest and code coverage with Coverage
      id: test-pytest
      run: |
        echo -e "${BLUE}[ STEP - TESTING & COVERAGE ] > Testing Python code with Pytest and code coverage with Coverage.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Pytest version.${BLANK}"
        pytest --version
        echo -e "${CYAN}[ INFO ] > Coverage version.${BLANK}"
        coverage --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing testing.${BLANK}"
        pytest ${WORKING_DIR}/tests/ --cov-report=xml --cov=./ --cov-config=.coveragerc
        echo -e "${YELLOW}[ EXECUTING ] > Executing coverage analysis.${BLANK}"
        coverage report -m --omit="${WORKING_DIR}/tests/*" --precision=2
        COV_RATE=$(coverage report -m --omit="${WORKING_DIR}/tests/*" --precision=2 | grep "TOTAL" | awk -F " " '{print $NF}')
        echo -e "${CYAN}[ INFO ] > Code coverage is ${COV_RATE}.${BLANK}"
        if [[ ${COV_RATE//%} < ${COVERAGE_THRESHOLD} ]]
        then
          echo -e "${RED}[ FAILURE ] > Code coverage is ${COV_RATE} below threshold ${COVERAGE_THRESHOLD}%. Tests are too weak.${BLANK}"
          exit 1
        else
          echo -e "${GREEN}[ SUCCESS ] > Code coverage is ${COV_RATE} above threshold ${COVERAGE_THRESHOLD}%. Tests are ok.${BLANK}"
        fi
    - name: Hadolint Dockerfile scan
      uses: ixxeL-actions/hadolint@main
      with:
        format: 'json'
        treshold: 'error'
        working-dir: '${WORKING_DIR}'
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: false

  build:
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    container: 
      image: ixxel/multi-tools-alpine:latest
      options: --privileged
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: Fetch image version
      id: fetch-version
      run: |
        echo -e "${BLUE}[ STEP - FETCHING VERSION ] > Fetching docker image version from script.${BLANK}"
        echo -e "${YELLOW}[ EXECUTING ] > Executing fetching.${BLANK}"
        APP_VERSION=$(python3 ${WORKING_DIR}/skopeoTransfer.py --version | grep -Eo "[0-9]+.{1,4}")
        echo ::set-output name=APP_VERSION::${APP_VERSION}
        echo -e "${CYAN}[ INFO ] > Script version is ${APP_VERSION}.${BLANK}"
    - name: Build docker image with buildah
      id: build-image
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/buildah-bud@main
      with:
        tag: '${PROGRAM_NAME}:${APP_VERSION}'
        file: '""'
        format: 'oci'
        build-arg: ''
        working-dir: '${WORKING_DIR}'
    - name: Archive docker image for CVE scan
      id: archive-image
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/buildah-push@main
      with:
        image-id: 'localhost/${PROGRAM_NAME}:${APP_VERSION}'
        transport: 'docker-archive'
        destination: '/tmp/${PROGRAM_NAME}-${APP_VERSION}.tar'
        format: '""'
    - name: Security scan for docker image (Grype)
      id: scan-image1 
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/grype-scan@main
      with:
        image-ref: '/tmp/${PROGRAM_NAME}-${APP_VERSION}.tar'
        transport: 'docker-archive'
        fail-on: '""'
        output: 'table'
        scope: 'AllLayers'
        template: '""'
        verbose: ''
    - name: Security scan for docker image (Trivy)
      id: scan-image2
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/trivy-scan@main
      with:
        scan-type: 'image'
        input: '/tmp/${PROGRAM_NAME}-${APP_VERSION}.tar'
        security-checks: 'vuln,config'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        output: '""'
        format: 'table'
        template: ''
        skip-dirs: '/usr/local/bin,/usr/bin'
    - name: Transfer image with Skopeo
      id: transfer-image-version
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/skopeo-copy@main
      with:
        src-img: 'localhost/${PROGRAM_NAME}:${APP_VERSION}'
        dst-img: '${REPOSITORY}/${PROGRAM_NAME}:${APP_VERSION}'
        format: 'v2s2'
        src-transport: 'containers-storage'
        dst-transport: 'docker'
        dst-creds: 'ixxel:${{ secrets.DOCKER_IO_PWD }}'
    - name: Transfer image with Skopeo (latest)
      id: transfer-image-latest
      env:
        APP_VERSION: ${{ steps.fetch-version.outputs.APP_VERSION }}
      uses: ixxeL-actions/skopeo-copy@main
      with:
        src-img: 'localhost/${PROGRAM_NAME}:${APP_VERSION}'
        dst-img: '${REPOSITORY}/${PROGRAM_NAME}:latest'
        format: 'v2s2'
        src-transport: 'containers-storage'
        dst-transport: 'docker'
        dst-creds: 'ixxel:${{ secrets.DOCKER_IO_PWD }}'

